#+TITLE: Abbes Emacs Config
#+AUTHOR: Albin Forsberg
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#startup][Startup]]
  - [[#package-manager][Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#which-key][Which Key]]
  - [[#keybindings][Keybindings]]
- [[#fonts][Fonts]]
- [[#graphics][Graphics]]
  - [[#setup][Setup]]
  - [[#line-numbers][Line numbers]]
- [[#org-mode][Org Mode]]
  - [[#table-of-contents][Table of Contents]]
  - [[#bullets][Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#org-tempo][Org Tempo]]

* Startup

** Package Manager

This section configures Elpaca, a package manager for Emacs, enabling the management of packages easily.

*** Install Elpaca

This code initializes Elpaca, defining its directories and the order of packages to install.

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                               :ref nil
                               :files (:defaults (:exclude "extensions"))
                               :build (:not elpaca--activate-package)))

(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
      (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
               ((zerop (call-process "git" nil buffer t "clone"
                                     (plist-get order :repo) repo)))
               ((zerop (call-process "git" nil buffer t "checkout"
                                     (or (plist-get order :ref) "--"))))
               (emacs (concat invocation-directory invocation-name))
               ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                     "--eval" "(byte-recompile-directory \".\" 0 'force)")))
               ((require 'elpaca))
               ((elpaca-generate-autoloads "elpaca" repo)))
          (kill-buffer buffer)
        (error "%s" (with-current-buffer buffer (buffer-string))))
    ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

*** Windows Support

Configuration to ensure compatibility with Windows systems that may have issues with symlinks.

#+begin_src emacs-lisp
;; Uncomment for systems which cannot create symlinks
(elpaca-no-symlink-mode)
#+end_src

*** Set Elpaca as Package Manager

This code block sets up support for `use-package` with Elpaca.

#+begin_src emacs-lisp
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue is processed.
(elpaca-wait)

;; When installing a package which modifies a form used at the top-level
;; (e.g., a package which adds a use-package keyword),
;; use `elpaca-wait' to block until that package has been installed/configured.
#+end_src

** Load Evil Mode

This section sets up Evil mode, a Vim emulation layer for Emacs.

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)  ;; Optional, already t by default.
  (setq evil-want-keybinding nil)  ;; Prevent keybinding conflicts.
  (setq evil-vsplit-window-right t) ;; Split windows behavior.
  (setq evil-split-window-below t)  ;; Split windows behavior.
  (evil-mode))                      ;; Enable Evil mode.
(elpaca-wait)                       ;; Wait for installation to finish.

;; Load Evil-Collection after Evil is loaded.
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
#+end_src

** Which Key

Configuration for displaying available keybindings in a context-sensitive way.

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " ))
#+end_src

** Keybindings

This section customizes keybindings for various modes. Using `general`.

#+begin_src emacs-lisp
  (use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer dt/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (dt/leader-keys
    "b" '(:ignore t :wk "buffer")
    "bb" '(switch-to-buffer :wk "Switch buffer")
    "bk" '(kill-this-buffer :wk "Kill this buffer")
    "bn" '(next-buffer :wk "Next buffer")
    "bp" '(previous-buffer :wk "Previous buffer")
    "br" '(revert-buffer :wk "Reload buffer"))

)
#+end_src

* Fonts

Before, we need to install JetBrains and Ubuntu fonts. (ttfs will be added to repo)

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

* Graphics
** Setup
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* Org Mode

Configuration specific to Org mode.

** Table of Contents

Automatically generate a table of contents in Org files.

#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable)) ;; Enable TOC in Org mode.
#+end_src

** Bullets

Enhance the appearance of bullet points in Org files.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode) ;; Enable indentation in Org mode.
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))) ;; Enable org-bullets.
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** Org Tempo
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
