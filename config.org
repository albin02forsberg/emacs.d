#+TITLE: Abbes emacs config
#+AUTHOR: Albin Forsberg

* Table of Content :toc:
- [[#setup][Setup]]
  - [[#set-default-encoding-to-utf-8][Set Default Encoding to UTF-8]]
  - [[#set-24-hour-clock][Set 24 hour clock]]
  - [[#fun][Fun]]
  - [[#start-in-fullscreen][Start in Fullscreen]]
  - [[#set-theme][Set theme]]
  - [[#backup-dir][Backup dir]]
  - [[#package-manager][Package Manager]]
- [[#user-interface][User Interface]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#which-key][Which Key]]
  - [[#keybindings][Keybindings]]
  - [[#all-the-icons][All the Icons]]
  - [[#ivy][Ivy]]
  - [[#dashboard][Dashboard]]
  - [[#modeline][Modeline]]
- [[#fonts][Fonts]]
- [[#graphics][Graphics]]
  - [[#setup-1][Setup]]
  - [[#line-numbers][Line Numbers]]
  - [[#tab-width][Tab width]]
- [[#org-mode][Org Mode]]
  - [[#table-of-contents][Table of Contents]]
  - [[#bullets][Bullets]]
  - [[#org-modern][Org modern]]
  - [[#org-bullets][Org bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#org-tempo][Org Tempo]]
  - [[#agenda][Agenda]]
  - [[#timeclock][Timeclock]]
  - [[#org-clock][Org clock]]
  - [[#org-roam][Org Roam]]
- [[#ai][AI]]
  - [[#gptel][gptel]]
- [[#software-development][Software Development]]
  - [[#projectile][Projectile]]
  - [[#treesitter][Treesitter]]
  - [[#smartparens][Smartparens]]
  - [[#yasnippet][yasnippet]]
  - [[#company-mode][Company mode]]
  - [[#flycheck][Flycheck]]
  - [[#language-servers][Language servers]]
  - [[#yaml][yaml]]
  - [[#terraform][Terraform]]
  - [[#magit][Magit]]

* Setup
** Set Default Encoding to UTF-8
This section configures Emacs to use UTF-8 as the default encoding.
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-language-environment "UTF-8")
#+end_src
** Set 24 hour clock
#+begin_src emacs-lisp
(setq display-time-24hr-format t)
#+end_src
** Fun
#+begin_src emacs-lisp
(require 'zone)
(zone-when-idle 120)
#+end_src

** Start in Fullscreen
#+begin_src emacs-lisp
 ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (toggle-frame-fullscreen)
#+end_src

** Set theme
#+begin_src emacs-lisp
  (load-theme 'wombat t)
#+end_src

** Backup dir
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

** Package Manager
This section configures Elpaca, a package manager for Emacs, enabling easy package management.
*** Package
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))

  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (kill-buffer buffer)
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

*** Windows Support
Configuration to ensure compatibility with Windows systems that may have issues with symlinks.
#+begin_src emacs-lisp
  ;; Uncomment for systems that cannot create symlinks
  (elpaca-no-symlink-mode)
#+end_src

*** Set Elpaca as Package Manager
Sets up support for `use-package` with Elpaca.
#+begin_src emacs-lisp
  (elpaca elpaca-use-package
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t)
    (setq use-package-always-ensure t))

  (elpaca-wait) ;; Block until the current queue is processed.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src


* User Interface
** Load Evil Mode
Configures Evil mode, a Vim emulation layer for Emacs.
#+begin_src emacs-lisp
  ;; (use-package evil
  ;;   :init
  ;;   (setq evil-want-integration t
  ;;         evil-want-keybinding nil
  ;;         evil-vsplit-window-right t
  ;;         evil-split-window-below t)
  ;;   (evil-mode))  ;; Enable Evil mode.

  ;; (use-package evil-collection
  ;;   :after evil
  ;;   :config
  ;;   (setq evil-collection-mode-list '(dashboard dired ibuffer magit ivy))
  ;;   (evil-collection-init))
#+end_src

** Which Key
Configures `which-key` to display available keybindings contextually.
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " â†’ "))
#+end_src

** Keybindings
Setting up some keybindings for emacs (not evil)

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    ;; Set up 'SPC' as the global leader key.
    (general-create-definer dt/leader-keys
      :major-modes t
      :keymaps 'override
      :prefix "C-c")

    (dt/leader-keys
     ;; Buffer
     "b" '(:ignore t :wk "buffer")
     "bb" '(switch-to-buffer :wk "Switch buffer")
     "bk" '(kill-this-buffer :wk "Kill this buffer")
     "bn" '(next-buffer :wk "Next buffer")
     "bp" '(previous-buffer :wk "Previous buffer")
     "br" '(revert-buffer :wk "Reload buffer")
     ;; gptel
     "c" '(:ignore t :wk "gptel")
     "cb" '(gptel :wk "Start gptel buffer")
     "cs" '(gptel-send :wk "Send query to gpt")
     ;; Git
     "g" '(:ignore t :wk "git")
     "gg" '(magit :wk "git status")
     ;; Org
     "n" '(:ignore t :wk "org")
     "nc" '(org-capture :wk "capture")
     "na" '(org-agenda :wk "agenda")
     ;; Projectile
     "p" '(:ignore t :wk "project")
     "pp" '(projectile-switch-project :wk "Switch to project")
     "pf" '(:ignore t :wk "project file")
     "pff" '(projectile-find-file :wk "Switch to project")
     ;; Timeclock
     "t" '(:ignore t :wk "timeclock")
     "ti" '(timeclock-in :wk "Clock in")
     "to" '(timeclock-out :wk "Clock out")
   ;; Dasboard
     "d" '(dashboard-open :wk "Dashboard")
  ))

#+end_src
   
** All the Icons
Sets up the display of icons in Emacs.
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Ivy
Configuration for Ivy, a completion framework.
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :diminish
    :config 
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config)
#+end_src

** Dashboard
Configures the startup dashboard.
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner "~/.config/emacs/images/dtmacs-logo.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom 
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Modeline
#+begin_src emacs-lisp
          (use-package telephone-line
        :ensure t
        :config 
        (telephone-line-mode 1)
        (display-time-mode 1)
        (timeclock-mode-line-display 1))
            ;; (use-package powerline
          ;;     :ensure t
          ;;     :config
          ;;     (powerline-default-theme)  ;; Set the default powerline theme
          ;;     (display-time-mode 1)
          ;;     (timeclock-mode-line-display 1)
          ;;     ;; Custom mode line format
          ;;     ;; (setq-default mode-line-format
          ;;     ;;               (list
          ;;     ;;                ;; Buffer name
          ;;     ;;                '(:eval (propertize (if (buffer-file-name)
          ;;     ;;                                        (abbreviate-file-name (buffer-file-name))
          ;;     ;;                                      "%b")  ;; Use buffer name if no file is associated
          ;;     ;;                                    'face '(:foreground "white" :weight bold)))
          ;;     ;;                ;; Space
          ;;     ;;                "  "
          ;;     ;;                ;; Major mode
          ;;     ;;                '(:eval (propertize mode-name 'face '(:foreground "lightblue" :weight bold)))
          ;;     ;;                ;; Space
          ;;     ;;                "  "
          ;;     ;;                ;; VC status
          ;;     ;;                '(:eval (when (and (fboundp 'vc-mode) vc-mode)
          ;;     ;;                          (propertize (format "[%s]" (vc-working-revision)) 'face '(:foreground "green"))))
          ;;     ;;                ;; Line and column numbers
          ;;     ;;                "  "
          ;;     ;;                '(:eval (propertize (format "(%d, %d)" (line-number-at-pos) (current-column))
          ;;     ;;                                    'face '(:foreground "yellow")))
          ;;     ;;                ;; Time
          ;;     ;;                "  "
          ;;     ;;                '(:eval (propertize (format-time-string "%H:%M") 'face '(:foreground "orange"))))))
          ;; )
#+end_src

You can replace the segments and separators with ones that fit your aesthetic and functional preferences. After saving your configuration, restart Emacs or evaluate the buffer to apply the changes.

* Fonts
Configures font settings. Ensure JetBrains and Ubuntu fonts are installed.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu"
                      :height 120
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'medium)

  ;; Italicize comments and keywords.
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-10"))

  ;; Uncomment to adjust line spacing if needed.
  ;; (setq-default line-spacing 0.12)				
#+end_src

* Graphics
** Setup
Basic UI setup by disabling unnecessary UI elements.
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Line Numbers
Enables line numbers and visual line mode.
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

** Tab width
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
#+end_src

* Org Mode
Configuration specific to Org mode.
** Table of Contents
Automatically generates a table of contents in Org files.
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))  ;; Enable TOC in Org mode.
#+end_src

** Bullets
Enhances bullet point appearance in Org files.
#+begin_src emacs-lisp
  ;; (add-hook 'org-mode-hook 'org-indent-mode)  ;; Enable indentation in Org mode.
  ;; (use-package org-bullets
  ;;   :config
  ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))  ;; Enable org-bullets.
#+end_src

** Org modern
#+begin_src emacs-lisp
          (use-package org-modern
        :ensure t
        :init
        (with-eval-after-load 'org (global-org-modern-mode)))
#+end_src
** Org bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)  ;; Enable indentation in Org mode.
#+end_src
** Disable Electric Indent
Disables electric indentation in Org mode.
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** Org Tempo
Sets up Org tempo for faster text expansion.
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Agenda
#+begin_src emacs-lisp
  ;; (setq org-directory "~/org")
  ;; (setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/todo.org" "Tasks")
           "* TODO %?\n  SCHEDULED: %t\n  %i\n  %a")
          ("j" "Journal" entry (file+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src

** Timeclock
#+begin_src emacs-lisp
(setq display-time-mode t)
(setq timeclock-mode-line-display t)
#+end_src

** Org clock
#+begin_src emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+end_src

** Org Roam
#+begin_src emacs-lisp
          (use-package org-roam
          :ensure t
          :custom
          (org-roam-directory "~/org-roam")
          (org-roam-dailies-directory "journal/")
          :bind (("C-c n l" . org-roam-buffer-toggle)
               ("C-c n f" . org-roam-node-find)
               ("C-c n i" . org-roam-node-insert)
               :map org-mode-map
               ("C-M-i" . completion-at-point)
               :map org-roam-dailies-map
  ("Y" . org-roam-dailies-capture-yesterday)
  ("T" .  org-roamdailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
          :config
          (require 'org-roam-dailies)
          (org-roam-db-autosync-mode)
          (org-roam-setup))

(use-package org-roam-ui
:after org-roam)
#+end_src

* AI
** gptel
#+begin_src emacs-lisp
  (use-package gptel)
#+end_src

* Software Development
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+end_src
** Treesitter
#+begin_src emacs-lisp
  (use-package tree-sitter)
#+end_src

** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :ensure smartparens  ;; install the package
  :hook (prog-mode text-mode markdown-mode dart-mode typescript-mode) ;; add `smartparens-mode` to these hooks
  :config
  ;; load default config
  (require 'smartparens-config))
#+end_src

** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
:ensure t)
#+end_src

** Company mode
#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :config
    (setq company-minimum-prefix-length 3)
    (setq company-idle-delay 0.5))
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src

** Language servers
*** lsp mode 
**** Setup
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :ensure t
  :config
  ;; Enable which-key integration
  (lsp-enable-which-key-integration)

  ;; Enable auto-formatting on save for all LSP-supported modes
  (add-hook 'lsp-mode-hook
            (lambda ()
              (add-hook 'before-save-hook #'lsp-format-buffer nil 'local))))

(use-package lsp-treemacs
  :ensure t)

(setq gc-cons-threshold 5000000000)
(setq read-process-output-max (* 10240 10240))
(setq lsp-idle-delay 0.500)
#+end_src

**** Servers
***** Flutter
#+begin_src emacs-lisp
          (use-package dart-mode
            :mode ("\\.dart\\'")
            :ensure t)

      (use-package lsp-dart
        :ensure t
        :hook ((dart-mode . lsp-deferred)
               (typescript-mode . lsp-deferred)
               (python-mode . lsp-deferred)
               (yaml-mode . lsp-deferred)
               (terraform-mode . lsp-deferred))
      )
#+end_src
***** ts/js
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode ("\\.ts\\'" "\\.js\\'"))
#+end_src
**** Python
#+begin_src emacs-lisp
(use-package python-mode
:mode ("\\.py\\'"))
#+end_src
** yaml
#+begin_src emacs-lisp
(use-package yaml-mode
:mode ("\\.yaml\\'" "\\.yml\\'"))
#+end_src
** Terraform
#+begin_src emacs-lisp
(use-package terraform-mode
:mode ("\\.tf\\'"))
#+end_src

** Magit
Configuration for Magit, the Git interface for Emacs.
#+begin_src emacs-lisp
    (use-package transient
      :defer t)

  ;; Configure magit

  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status))
    :config
    (setq magit-auto-revert-mode t))
#+end_src
